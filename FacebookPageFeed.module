<?php
/**
 * FacebookPageFeed (0.0.1)
 * Provides a simple way to retrieve data from a Facebook page.
 * 
 * @author Rupert Dunk
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 * 
 */

class FacebookPageFeed extends WireData implements Module, ConfigurableModule, IteratorAggregate {

	public static function getModuleInfo() {
		return array(
			'title' => "FacebookPageFeed",
			'version' => "0.0.1",
			'summary' => "Provides a simple way to retrieve data from a Facebook page.",
			'author' => "Rupert Dunk",
			'href' => "https://github.com/rdunk/FacebookPageFeed",
			'autoload' => false,
			'singular' => true,
			'permanent' => false
			
		);
	}


	public $defaultFields = "about,posts.limit(8){full_picture,message,created_time,shares,comments{comment_count},likes,link,message_tags,type,name},link";

	static public function getDefaults() {
		return array(
			"page_id" => "",
			"access_token" => "",
			"fields" => $defaultFields
		);
	}

	public function init() { }

	public function getIterator() {
		$data = $this->getPage();
		return new ArrayObject($data);
	}

	public function getPage() {
		$fields = (strlen($this->fields) ? $this->fields : $this->defaultFields);
		$theurl = "https://graph.facebook.com/v2.4/".$this->page_id."?fields=".$fields."&access_token=".$this->access_token;
		$json_object = file_get_contents($theurl);
		$fbdata = json_decode($json_object);
		$posts = array();
		foreach ($fbdata->posts->data as $p) {
			$post = new FacebookPost($p);
			$posts[] = $post;
		}
		return $posts;
	}

	public function getModuleConfigInputfields(array $data) {
		$inputfields = new InputfieldWrapper();

		$defaults = self::getDefaults();
		$data = array_merge($defaults, $data);

		$modules = wire('modules');

		$f = $modules->get('InputfieldText'); 
		$f->name = 'page_id'; 
		$f->label = 'Page ID';
		$f->value = $data['page_id'];
		$inputfields->add($f); 

		$f = $modules->get('InputfieldText'); 
		$f->name = 'access_token'; 
		$f->label = 'Access Token';
		$f->value = $data['access_token'];
		$inputfields->add($f); 

		$f = $modules->get('InputfieldText'); 
		$f->name = 'fields'; 
		$f->label = 'Fields';
		$f->value = $data['fields'];
		$f->description = 'Use this field to input a custom selector string, leave blank to use the default shown below.';
		$f->notes = "Defaults: ".$this->defaultFields;
		$inputfields->add($f);

		return $inputfields; 
		
	}

}

class FacebookPost {

	public $title;
	public $time;
	public $link;
	public $text;
	public $meta;
	public $picture;

	public function __construct($post) {
		$this->title = $post->name;
		$this->time = $this->getCreated($post->created_time);
		$this->link = "http://facebook.com/".$post->id;
		$this->text = $this->getPostText($post->message, $post->message_tags);
		$this->meta = $this->getPostMetaCount($post->likes->data, $post->shares->count, $post->comments->data);
		$this->picture = $post->full_picture;
	}

	private function getPostText($message, $tags) {
		if (!strlen($message)) return false;
		$return = $message;
		$entities = array();
		if(count($tags)) {
			foreach($tags as $tag) {
				$temp["start"] = $tag[0]->offset;
				$temp["length"] = $tag[0]->length;
				$temp["replacement"] = "<a href='http://facebook.com/".$tag[0]->id."' target='_blank'>".$tag[0]->name."</a>";
				$entities[] = $temp;
			}
		}
		usort($entities, function($a,$b){return($b["start"]-$a["start"]);});
		foreach($entities as $item) {
			$return = mb_substr_replace($return, $item["replacement"], $item["start"], $item["length"]);
		}
		return $return;
	}

	private function getPostMetaCount($likes, $shares, $comments) {
		$arr = [
			'likes' => [
				'count' => count($likes),
				'icon' => 'favorite'
				],
			'shares' => [
				'count' => $shares,
				'icon' => 'retweet'
				],
			'comments' => [
				'count' => count($comments),
				'icon' => 'comment'
				]
		];
		foreach ($arr as $key => $val) if (!$val['count']) unset($arr[$key]);
		return $arr;
	}

	private function getCreated($time) {
		$since = time() - strtotime($time);
		$string = '';
		$chunks = array(
			array(60 * 60 * 24 * 365 , 'year'),
			array(60 * 60 * 24 * 30 , 'month'),
			array(60 * 60 * 24 * 7, 'week'),
			array(60 * 60 * 24 , 'day'),
			array(60 * 60 , 'hour'),
			array(60 , 'minute'),
			array(1 , 'second')
		);
		for ($i = 0, $j = count($chunks); $i < $j; $i++) {
			$seconds = $chunks[$i][0];
			$name = $chunks[$i][1];
			if (($count = floor($since / $seconds)) != 0) {
				break;
			}
		}
		$string = ($count == 1) ? '1 ' . $name . ' ago' : $count . ' ' . $name . 's ago';
		return $string;
	}
}